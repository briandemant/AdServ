/*! AdServ  0.0.8 2013-06-03 13:57:32 */
"use strict";

(function(a, b) {
    a.AdServ = b(a, a.document);
})(window, function(a, b) {
    var c = a.AdServ || {};
    c.version = "0.0.8";
    c.released = "2013-06-03 13:57:32";
    a.AdServ = c;
    var d = function(a) {
        return a && typeof a === "function";
    };
    var e = function(a) {
        return a && typeof a === "object";
    };
    var f = function(a) {
        return a && a.toString() === "[object Array]";
    };
    var g = function(a) {
        return a && typeof a === "string";
    };
    var h = function(a) {
        return a && typeof a === "undefined";
    };
    var i = function(a) {
        return a ? a.nodeType === 1 : false;
    };
    var j = function(a) {
        return a ? a.nodeType === 9 : false;
    };
    var k = function() {};
    c.conf = {
        xhrTimeout: 5e3,
        baseUrl: ""
    };
    c.get = function(a, b) {
        var d, e;
        try {
            e = new XMLHttpRequest();
        } catch (f) {
            try {
                e = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (f) {
                return null;
            }
        }
        var g = function() {
            e.abort();
            b("aborted by a timeout", null, e);
        };
        d = setTimeout(g, c.conf.xhrTimeout);
        e.onreadystatechange = function() {
            if (e.readyState != 4) {
                return;
            }
            clearTimeout(d);
            b(e.status != 200 ? "err : " + e.status : null, e.responseText, e);
        };
        e.open("GET", a, true);
        e.send();
        return e;
    };
    c.getJSON = function(a, b) {
        return c.get(a, function(a, d, e) {
            var f = d;
            if (!a) {
                f = c.parseJSON(d);
            }
            b(a, f, e);
        });
    };
    var l = function(a, c) {
        if (i(a)) {
            return a;
        }
        if (!c) {
            c = b;
        }
        return c.querySelector(a);
    };
    var m = function(a, c) {
        if (!c) {
            c = b;
        }
        return Array.prototype.slice.call(c.querySelectorAll(a));
    };
    c.$ = l;
    c.$$ = m;
    var n;
    if (!a.getComputedStyle) {
        n = function(a, b) {
            this.el = l(a);
            this.getPropertyValue = function(b) {
                var c = /(\-([a-z]){1})/g;
                if (b == "float") {
                    b = "styleFloat";
                }
                if (c.test(b)) {
                    b = b.replace(c, function() {
                        return arguments[2].toUpperCase();
                    });
                }
                return a.currentStyle[b] ? a.currentStyle[b] : null;
            };
            return this;
        };
    } else {
        n = a.getComputedStyle;
    }
    var o = function(a, b) {
        a = l(a);
        return n(l(a)).getPropertyValue(b);
    };
    c.css = o;
    var p = function(a) {
        a = l(a);
        if (!a) {
            return false;
        }
        if (a.nodeName === "BODY") {
            return true;
        }
        if (o(a, "visibility") == "hidden") {
            return false;
        }
        if (o(a, "display") == "none") {
            return false;
        }
        if (o(a, "opacity") == "0") {
            return false;
        }
        return p(a.parentNode);
    };
    c.isVisible = p;
    var q = {};
    var r = function(b, c, d) {
        q[b] = typeof q[b] === "undefined" ? [] : q[b];
        q[b].push(function(b) {
            return c.apply(d || a, b);
        });
    };
    c.on = r;
    var s = function(a, b, c) {
        r(a, function() {
            b();
            b = k;
        }, c);
    };
    c.once = s;
    var t = function(a) {
        if (typeof q[a] !== "undefined") {
            var b = Array.prototype.slice.call(arguments, 1);
            for (var c = 0; c < q[a].length; c++) {
                q[a][c](b);
            }
        }
    };
    c.emit = t;
    var u = a["onresize"] || k;
    a.onresize = function() {
        try {
            u();
        } catch (a) {}
        t("resize");
    };
    var v = false;
    var w = a.onload || k;
    a.onload = function() {
        v = true;
        try {
            w();
        } catch (a) {}
        t("load");
    };
    var x = function(a) {
        if (v) {
            a();
        } else {
            s("load", a);
        }
    };
    c.ready = x;
    var y = JSON.parse;
    c.parseJSON = y;
    var z = function() {
        console.log("loading %o", c);
    };
    c.load = z;
    return c;
});