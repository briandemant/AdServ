/*! AdServ  2.2.2 2014-10-24 14:53:28 */
"use strict";

!function(window, definition) {
    window.AdServ = definition(window, window.document);
}(window, function(window, document) {
    function safe_log(kind) {
        return function(msg) {
            try {
                AdServ.log_messages.push(kind + ":" + JSON.stringify(msg));
            } catch (e) {
                AdServ.log_messages.push(kind + ":" + msg);
            }
        };
    }
    function noop() {}
    function randhex(length) {
        return (4294967296 * (1 + Math.random())).toString(16).substr(1, length);
    }
    function count() {
        return guid.count.toString(16).substr(1, 4);
    }
    function guid() {
        guid.count++, guid.date || (guid.date = ((Date.now() - 11281176e5) / 1e3 | 0).toString(16), 
        guid.count = 65537, setTimeout(function() {
            guid.date = !1;
        }, 1e3));
        var result = toArray(arguments);
        return result.push(guid.date), result.push(count()), result.push(randhex(8)), result.join("_");
    }
    function toArray(list) {
        return slice.call(list, 0);
    }
    function isFunction(item) {
        return item && "function" == typeof item;
    }
    function isObject(item) {
        return item && "object" == typeof item && "[object Object]" === toString.call(item);
    }
    function isArray(item) {
        return item && "object" == typeof item && "[object Array]" === toString.call(item);
    }
    function isElement(item) {
        return item ? 1 === item.nodeType : !1;
    }
    function throttle(fn, ms) {
        var disabled = !1;
        return function() {
            disabled || (disabled = !0, fn(), setTimeout(function() {
                fn(), disabled = !1;
            }, ms));
        };
    }
    function len(item) {
        return item.length;
    }
    function mix(defaults, overrides) {
        var k, result = {};
        for (k in defaults) defaults.hasOwnProperty(k) && (result[k] = defaults[k]);
        for (k in overrides) overrides.hasOwnProperty(k) && (result[k] = overrides[k]);
        return result;
    }
    function isSupportedBrowser() {
        return ("addEventListener" in window || "attachEvent" in window) && "querySelector" in document && "querySelectorAll" in document && "JSON" in window && "stringify" in JSON && "parse" in JSON && "postMessage" in window;
    }
    function get(url, cb) {
        function cancelAbort() {
            clearTimeout(requestTimeout);
        }
        cb = cb || noop;
        var requestTimeout, xhr;
        if (window.XDomainRequest) xhr = new XDomainRequest(), xhr.onprogress = function() {}; else if (window.XMLHttpRequest) xhr = new XMLHttpRequest(); else try {
            xhr = new activeX("Msxml2.XMLHTTP");
        } catch (e) {
            return null;
        }
        return requestTimeout = setTimeout(function() {
            xhr.abort(), cb("aborted by a timeout", null, xhr);
        }, 5e3), xhr.onreadystatechange = function() {
            4 == xhr.readyState && (xhr.onload = noop, cancelAbort(), cb(200 != xhr.status ? "err : " + xhr.status : null, xhr.responseText, xhr));
        }, xhr.onload = function() {
            cancelAbort(), xhr.status ? cb(200 != xhr.status ? "err : " + xhr.status : null, xhr.responseText, xhr) : cb(xhr.responseText ? null : "err : no response", xhr.responseText, xhr);
        }, xhr.open("GET", url, !0), xhr.send(), xhr;
    }
    function getJSON(url, cb) {
        return get(url, function(err, value, xhr) {
            var json = value;
            if (!err) try {
                json = parseJSON(value);
            } catch (e) {
                return cb("malformed json : " + e.message);
            }
            cb(err, json, xhr);
        });
    }
    function loadScript(url, onload) {
        onload = onload || noop;
        var script = document.createElement("script"), head = document.head || document.body;
        script.src = (url.indexOf("?") > 0 ? url + "&" : url + "?") + "rnd=" + Math.random(), 
        script.onload = script.onreadystatechange = function() {
            script[readyState] && "loaded" != script[readyState] && "complete" != script[readyState] || (onload(), 
            head.removeChild(script), script.onload = script.onreadystatechange = noop);
        }, head.appendChild(script);
    }
    function getPlayerVersion() {
        if (activeX) try {
            var atx = new activeX("ShockwaveFlash.ShockwaveFlash");
            if (atx) {
                var version = atx.GetVariable("$version").substring(4);
                return parseFloat(version.replace(",", "."));
            }
        } catch (e) {} else {
            var plugin = window.navigator.plugins["Shockwave Flash"];
            if (plugin && plugin.description) return parseFloat(plugin.description.match(/(\d+)\.(\d+)/)[0]);
        }
        return "0";
    }
    function passbackHandlerMaker(elem, campaign) {
        guid("handler", campaign.adspace);
        return function() {
            return function(m) {
                var payload, err;
                try {
                    payload = parseJSON(m.data);
                } catch (e) {
                    err = e;
                }
                err || payload.adspace != campaign.adspace || (console.warn("passback from adspace " + campaign.adspace + " to " + payload.next), 
                console.warn("campaign rejected:", campaign), elem.innerHTML = "", campaign.nesting = (0 | campaign.nesting) + 1, 
                campaign.nesting < 10 ? AdServ.load({
                    adspaces: [ {
                        id: payload.next,
                        target: elem,
                        adServingLoad: campaign.ctx.adServingLoad
                    } ]
                }) : console.error("too deep"));
            };
        };
    }
    function makeA(elem, campaign) {
        var a = document.createElement("a");
        return a.id = guid("a", campaign.adspace, campaign.campaign), a.setAttribute("href", campaign.click), 
        a.setAttribute("target", "_blank"), a.appendChild(elem), a;
    }
    function makeImg(campaign) {
        var img = document.createElement("img");
        return img.id = guid("img", campaign.adspace, campaign.campaign), img.border = 0, 
        img.src = campaign.image, img;
    }
    function createIframe(campaign) {
        var ifrm = document.createElement("iframe");
        return ifrm.id = guid("iframe", campaign.adspace, campaign.campaign), ifrm.style.width = campaign.width + "px", 
        ifrm.style.height = campaign.height + "px", ifrm.style.border = 0, ifrm.style.borderStyle = "none", 
        ifrm.frameBorder = 0, ifrm.scrolling = "no", ifrm;
    }
    function wrapIframe(target, campaign) {
        var ifrm = createIframe(campaign);
        return target.appendChild(ifrm), ifrm.contentDocument.write('<!doctype html><body style="margin:0px;padding:0px;width:100%;height:100%;"></body>'), 
        AdServ.bind(window, "message", passbackHandlerMaker(target, campaign)(ifrm)), ifrm;
    }
    function makeFloat(campaign) {
        console.log(campaign);
        var uid = guid("float");
        console.info("got a floating banner!", uid);
        var style = "position:fixed; width:" + campaign.width + "px; height:" + campaign.height + "px; z-index:2147483646;";
        if ("centre" == campaign.floating_position) style += "left:50%; top:50%;margin-left:-" + campaign.width / 2 + "px;margin-top:-" + (campaign.height + 16) / 2 + "px;"; else if ("top_centre" == campaign.floating_position) style += "left:50%; top:0;margin-left:-" + campaign.width / 2 + "px;"; else if ("top_left" == campaign.floating_position) style += "left:0; top:0;"; else if ("top_right" == campaign.floating_position) style += "right:0; top:0;"; else if ("bottom_left" == campaign.floating_position) style += "left:0; bottom:0;"; else if ("bottom_right" == campaign.floating_position) style += "right:0; bottom:0;"; else if ("bottom_centre" == campaign.floating_position) style += "left:50%; bottom:0;margin-left:-" + campaign.width / 2 + "px;margin-top:-" + campaign.height / 2 + "px;;position:fixed !important;"; else if (campaign.floating_position.indexOf(".") > 0) {
            var coords = campaign.floating_position.split(".");
            style += "left:" + coords[0] + "; top:" + coords[1] + ";";
        }
        var floatingElem = document.createElement("div");
        floatingElem.id = "floating_" + uid, floatingElem.close = function() {
            clearTimeout(floatingElem.timeout), floatingElem.style.display = "none", AdServ.emit("floating:close", campaign), 
            floatingElem.close = noop;
        }, floatingElem.timeout = setTimeout(floatingElem.close, 1e3 * campaign.floating_time);
        var contentElem = document.createElement("div");
        if (contentElem.id = "content_" + uid, 0 != campaign.floating_close_position.indexOf("off")) {
            var closeElem = document.createElement("div");
            bind(closeElem, "click", floatingElem.close), closeElem.id = "close_" + uid;
            var closeStyle = "position:absolute; width:16px; height:16px;z-index:2147483646;border:0px; cursor:pointer;";
            style += "background:#fff;", "top_left" == campaign.floating_close_position ? closeStyle += "left:0; top:0;" : "top_right" == campaign.floating_close_position ? closeStyle += "right:0; top:0;" : "bottom_left" == campaign.floating_close_position ? closeStyle += "left:0; bottom:0;" : "bottom_right" == campaign.floating_close_position && (closeStyle += "right:0; bottom:0;"), 
            closeElem.setAttribute("style", closeStyle);
            var closeImg = document.createElement("img");
            closeImg.src = AdServ.baseUrl + "/close.gif", closeElem.appendChild(closeImg), floatingElem.appendChild(closeElem);
        }
        return floatingElem.appendChild(contentElem), floatingElem.setAttribute("style", style), 
        floatingElem.setAttribute("class", "adserving_float adserving_float_" + campaign.adspace), 
        campaign.elem.appendChild(floatingElem), AdServ.emit("floating:open", campaign), 
        contentElem;
    }
    function render(campaign) {
        var ifrm, targetElem;
        if (campaign.elem) {
            if (targetElem = campaign.elem, campaign.floating && (targetElem = makeFloat(campaign)), 
            campaign.iframe && "iframe" !== campaign.banner_type && "wallpaper" !== campaign.banner_type) {
                if ("html" === campaign.banner_type) return ifrm = createIframe(campaign), ifrm.src = AdServ.baseUrl + "/show_campaign.php?nocount=1&adspaceid=" + campaign.adspace + "&campaignid=" + campaign.campaign + "&bannerid=" + campaign.banner, 
                AdServ.bind(window, "message", passbackHandlerMaker(targetElem, campaign)(ifrm)), 
                void targetElem.appendChild(ifrm);
                ifrm = wrapIframe(targetElem, campaign), targetElem = ifrm.contentDocument.body;
            }
            var engine = engines[campaign.banner_type];
            engine ? engine(targetElem, campaign) : console.error("no renderer for banner type yet : " + campaign.banner_type, campaign);
        } else console.error("no element for banner yet : " + campaign.banner_type, campaign);
    }
    function getContext(adspace, contexts) {
        var ctxName = adspace.context || "_GLOBAL_";
        adspace.context = contexts[ctxName] = contexts[ctxName] || {
            name: ctxName,
            ids: [],
            adspaces: {},
            keyword: adspace.keyword || AdServ.keyword,
            searchword: adspace.searchword || AdServ.searchword,
            adServingLoad: ""
        }, adspace.adServingLoad && (adspace.context.adServingLoad += adspace.adServingLoad), 
        AdServ.keyword || (AdServ.keyword = adspace.keyword);
    }
    function set(name, def, args) {
        AdServ[name] = isObject(args[0]) && args[0][name] || AdServ[name] || def;
    }
    var AdServ = window.AdServ || {};
    AdServ.version = "2.2.2", AdServ.released = "2014-10-24 14:53:27", window.AdServ = AdServ, 
    DEBUG = !0;
    var domContentLoaded = "DOMContentLoaded", addEventListener = "addEventListener", onreadystatechange = "onreadystatechange", readyState = "readyState";
    if (AdServ.log_messages = [], void 0 !== window.console) var console = window.console; else console = {};
    if (console.log = console.log || safe_log("log"), console.debug = console.debug || safe_log("debug"), 
    console.error = console.error || safe_log("error"), console.warn = console.warn || safe_log("warn"), 
    console.info = console.info || safe_log("info"), window.adServingLoad = window.adServingLoad || "", 
    Date.now || (Date.now = function() {
        return +new Date();
    }), DEBUG) {
        var ie = !1;
        !function(ua) {
            var result;
            if ((result = /msie\s*(\d+)/.exec(ua)) ? ie = {
                version: parseInt(result[1])
            } : (result = /trident\/\s*(\d+)/.exec(ua)) && (ie = {
                version: parseInt(result[1]) + 4
            }), ie) {
                var jscript = 0;
                ie.supported = jscript >= 5.8 || ie.version > 10, ie.emulated = 7 == ie.version && 5.7 != jscript || 8 == ie.version && 5.8 != jscript || 9 == ie.version && 5.9 != jscript || 10 == ie.version && 10 != jscript;
            }
        }(navigator.userAgent.toLowerCase()), AdServ.ie = ie;
    }
    var toString = Object.prototype.toString, slice = Array.prototype.slice, urlencode = encodeURIComponent, activeX = window.ActiveXObject;
    AdServ.guid = guid;
    var evil = function(s) {
        return Function("return (" + s + ")")();
    };
    AdServ.isSupportedBrowser = isSupportedBrowser;
    {
        var getComputedStyle, ready = AdServ.ready = function(ready) {
            function flush(f) {
                for (loaded = 1; f = fns.shift(); ) f();
            }
            var fn, fns = [], f = !1, testEl = document.documentElement, hack = testEl.doScroll, loaded = /^loade|c/.test(document[readyState]);
            return document[addEventListener] && document[addEventListener](domContentLoaded, fn = function() {
                document.removeEventListener(domContentLoaded, fn, f), flush();
            }, f), hack && document.attachEvent(onreadystatechange, fn = function() {
                /^c/.test(document[readyState]) && (document.detachEvent(onreadystatechange, fn), 
                flush());
            }), ready = hack ? function(fn) {
                self != top ? loaded ? fn() : fns.push(fn) : function() {
                    try {
                        testEl.doScroll("left");
                    } catch (e) {
                        return setTimeout(function() {
                            ready(fn);
                        }, 50);
                    }
                    fn();
                }();
            } : function(fn) {
                loaded ? fn() : fns.push(fn);
            };
        }(), $ID = AdServ.$ID = function(target) {
            return isElement(target) ? target : document.getElementById(target);
        }, $ = AdServ.$ = function(selector, parent) {
            return isElement(selector) ? selector : (parent || (parent = document), parent.querySelector(selector));
        };
        AdServ.$$ = function(selector, parent) {
            return parent || (parent = document), slice.call(parent.querySelectorAll(selector));
        };
    }
    getComputedStyle = window.getComputedStyle ? window.getComputedStyle : function(el) {
        var style = {};
        return style.el = el, style.getPropertyValue = function(prop) {
            var re = /(\-([a-z]){1})/g;
            return "float" == prop && (prop = "styleFloat"), re.test(prop) && (prop = prop.replace(re, function() {
                return arguments[2].toUpperCase();
            })), style.el.currentStyle[prop] ? style.el.currentStyle[prop] : null;
        }, style;
    };
    var css = AdServ.css = function(elemOrSelector, name) {
        var elem = $ID(elemOrSelector);
        return elem ? getComputedStyle($(elem)).getPropertyValue(name) : null;
    }, isVisible = AdServ.isVisible = function(elemOrSelector) {
        var elem = $ID(elemOrSelector);
        return elem ? "BODY" === elem.nodeName ? !0 : "hidden" == css(elem, "visibility") ? !1 : "none" == css(elem, "display") ? !1 : "0" == css(elem, "opacity") ? !1 : isVisible(elem.parentNode) : !1;
    }, parseJSON = "object" == typeof JSON ? JSON.parse : function(source) {
        if (source += "", "" != source) {
            var simplified = source.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, "@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, "]").replace(/(?:^|:|,)(?:\s*\[)+/g, "");
            if (/^[\],:{}\s]*$/.test(simplified)) return evil(source);
        }
        throw "parseJSON failed";
    }, eventHandlers = {}, on = AdServ.on = function(event, fn, context) {
        event && fn && (eventHandlers[event] = void 0 === eventHandlers[event] ? [] : eventHandlers[event], 
        eventHandlers[event].push(function(args) {
            return fn.apply(context || window, args);
        }));
    }, emit = (AdServ.once = function(event, fn, context) {
        on(event, function() {
            fn(), fn = noop;
        }, context);
    }, AdServ.emit = function(event) {
        if (void 0 !== eventHandlers[event]) for (var args = slice.call(arguments, 1), i = 0; i < len(eventHandlers[event]); i++) eventHandlers[event][i](args);
    }), bind = AdServ.bind = function(elem, type, handler) {
        elem[addEventListener] ? elem[addEventListener](type, handler, !1) : elem.attachEvent("on" + type, handler);
    }, originalResize = (AdServ.unbind = function(elem, type, handler) {
        elem[addEventListener] ? elem.removeEventListener(type, handler, !1) : elem.detachEvent(type, handler);
    }, window.onresize || noop);
    window.onresize = function() {
        try {
            originalResize();
        } catch (e) {}
        emit("page:resize");
    }, ready(function() {
        emit("page:loaded");
    }), AdServ.get = get, AdServ.getJSON = getJSON, AdServ.loadScript = loadScript;
    var playerVersion;
    playerVersion = getPlayerVersion();
    var isFlashSupported = AdServ.flash = playerVersion >= 6 ? playerVersion : !1, Flash = function(url, id, width, height) {
        this.params = {
            quality: "best",
            allowscriptaccess: "always",
            wmode: "opaque"
        }, this.vars = {}, this.attrs = {
            swf: url,
            id: id,
            w: width,
            h: height
        };
    };
    Flash.prototype = {
        addParam: function(key, value) {
            this.params[key] = value;
        },
        addVariable: function(key, value) {
            this.vars[key] = value;
        },
        getVars: function() {
            var key, queryString = [];
            for (key in this.vars) queryString.push(key + "=" + this.vars[key]);
            return queryString;
        },
        getSWFHTML: function() {
            var html, params = this.params, attrs = this.attrs, vars = this.getVars().join("&"), common = ' width="' + attrs.w + '" height="' + attrs.h + '" id="' + attrs.id + '" name="' + attrs.id + '" ';
            if (activeX) {
                html = '<object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"' + common + '><param name="movie" value="' + attrs.swf + '" />';
                for (key in params) html += '<param name="' + key + '" value="' + params[key] + '" />';
                len(vars) > 0 && (html += '<param name="flashvars" value="' + vars + '" />'), html += "</object>";
            } else {
                html = '<embed type="application/x-shockwave-flash" src="' + attrs.swf + '"' + common;
                for (var key in params) html += key + '="' + params[key] + '" ';
                len(vars) > 0 && (html += ' flashvars="' + vars + '"'), html += ">";
            }
            return html;
        },
        write: function(target) {
            if (isFlashSupported) {
                var elem = $ID(target);
                if (elem) return elem.innerHTML = this.getSWFHTML(), !0;
            }
            return !1;
        }
    }, window.baSWFObject = Flash;
    var engines = {};
    engines.image = function(elem, campaign) {
        var img = makeImg(campaign), a = makeA(img, campaign);
        elem.appendChild(a);
    }, engines.iframe = function(elem, campaign) {
        var ifrm = document.createElement("iframe");
        ifrm.id = guid("iframe", campaign.adspace, campaign.campaign), ifrm.style.width = campaign.width + "px", 
        ifrm.style.height = campaign.height + "px", ifrm.style.border = 0, ifrm.style.borderStyle = "none", 
        ifrm.frameBorder = 0, ifrm.scrolling = "no", AdServ.bind(window, "message", passbackHandlerMaker(elem, campaign)(ifrm)), 
        ifrm.src = campaign.iframe_src, elem.appendChild(ifrm);
    }, engines.flash = function(elem, campaign) {
        var url = campaign.flash + "?" + campaign.click_tag_type + "=" + urlencode(campaign.click), flash = new Flash(url, guid("flash", campaign.adspace, campaign.campaign), campaign.width, campaign.height);
        if (!flash.write(elem)) {
            var img = makeImg(campaign), a = makeA(img, campaign);
            elem.appendChild(a);
        }
    }, engines.txt = function(elem, campaign) {
        var text = document.createTextNode(campaign.txt), a = makeA(text, campaign);
        elem.appendChild(a);
    }, engines.wallpaper = function(elem, campaign) {
        function adserving_bgclick(a) {
            a || (a = window.event);
            var tg = window.event ? a.srcElement : a.target;
            tg == elem && window.open(campaign.click);
        }
        elem.style.backgroundImage = "url(" + campaign.wallpaper + ")", elem.style.backgroundRepeat = campaign.wallpaper_repeat || "no-repeat", 
        elem.onclick = adserving_bgclick;
        var classes = document.body.getAttribute("class");
        document.body.setAttribute("class", (classes || "") + " adserving_wallpaper_loaded"), 
        emit("wallpaper:loaded", campaign);
    }, engines.html = function(elem, campaign) {
        function safeScriptContent(js) {
            return js.replace("document.write(", 'console.warn("WARNING : banner: ' + campaign.banner + ' uses document.write");document.write(');
        }
        var script, original;
        elem.innerHTML = campaign.html;
        var scripts = elem.getElementsByTagName("script"), iframes = elem.getElementsByTagName("iframe");
        1 == iframes.length && AdServ.bind(window, "message", passbackHandlerMaker(elem, campaign)(iframes[0]));
        for (var original, length = scripts.length, uid = guid("js", campaign.adspace, campaign.campaign), i = 0; length > i; i++) original = scripts[i], 
        console.log("original", original), original.src && (console.log("original.src"), 
        script = document.createElement("script"), script.id = uid + "_" + i, script.src = original.src, 
        elem.appendChild(script)), original.innerText ? (console.log("original.txt"), script = document.createElement("script"), 
        script.id = uid + "_" + i, script.innerText = safeScriptContent(original.innerText), 
        elem.appendChild(script)) : original.innerHTML && (console.log("original.html", original), 
        setTimeout(function(src) {
            return function() {
                console.log("eval", src), evil(safeScriptContent(src));
            };
        }(original.innerHTML), 1e3));
    }, AdServ.render = render;
    var prepareContexts = function(args) {
        set("baseUrl", "", args), set("keyword", "", args), set("searchword", "", args);
        for (var conf = {
            baseUrl: AdServ.baseUrl,
            xhrTimeout: 5e3,
            guid: guid("ad")
        }, index = 0; index < len(args); index++) {
            var arg = args[index];
            isFunction(arg) ? conf.ondone = arg : isObject(arg) ? conf = mix(conf, arg) : isArray(arg) && (conf.adspaces = arg);
        }
        if (!isArray(conf.adspaces)) {
            var global = window.ba_adspaces;
            !global || 0 === len(global) || global.added ? conf.adspaces = [] : (global.added = !0, 
            conf.adspaces = global);
        }
        if (!conf.wallpaper) {
            var global = window.ba_wallpaper;
            !global || 0 === len(global) || global.added || (global.added = !0, conf.wallpaper = global);
        }
        if (!conf.floating) {
            var global = window.ba_floating;
            !global || 0 === len(global) || global.added || (global.added = !0, conf.floating = global);
        }
        var contexts = conf.contexts = {}, adspaces = conf.adspaces;
        for (index = 0; index < len(adspaces); index++) {
            var adspace = adspaces[index];
            adspace.id > 0 && (getContext(adspace, contexts), adspace.context.ids.push(adspace.id), 
            adspace.context.adspaces[adspace.id] = adspace);
        }
        if (conf.floating) {
            var adspace = conf.floating;
            adspace.id > 0 && (getContext(adspace, contexts), adspace.context.floating = adspace, 
            adspace.context.adspaces[adspace.id] = adspace);
        }
        if (conf.wallpaper) {
            var adspace = conf.wallpaper;
            adspace.id > 0 && (getContext(adspace, contexts), adspace.context.wallpaper = adspace, 
            adspace.context.adspaces[adspace.id] = adspace);
        }
        return 0 != conf.adspaces.length || conf.wallpaper || conf.floating || console.error("no adspaces or wallpaper provided"), 
        conf;
    }, showCampaign = function(campaign) {
        render(campaign);
    }, checkVisibility = throttle(function() {
        for (var notReady = [], index = 0; index < len(invisibleAdspaces); index++) {
            var campaign = invisibleAdspaces[index];
            isVisible(campaign.elem) ? (recheck && clearInterval(recheck), showCampaign(campaign)) : notReady.push(campaign);
        }
        invisibleAdspaces = notReady;
    }, 200);
    AdServ.on("page:resize", function() {
        recheck && clearInterval(recheck), checkVisibility();
    });
    var recheck = 0, invisibleAdspaces = [];
    return AdServ.loadAdspaces = AdServ.load = function() {
        var conf = prepareContexts(arguments), anyWaiting = 0;
        for (var x in conf.contexts) anyWaiting++;
        for (var ctxName in conf.contexts) {
            var ctx = conf.contexts[ctxName], url = conf.baseUrl + "/api/v2/get/campaigns.json?" + (ctx.wallpaper ? "&wallpaper=" + ctx.wallpaper.id : "") + (ctx.floating ? "&floating=" + ctx.floating.id : "") + "&adspaces=" + ctx.ids.join(",") + "&adServingLoad=" + urlencode(ctx.adServingLoad) + "&keyword=" + urlencode(ctx.keyword) + "&sw=" + urlencode(ctx.searchword) + "&uid=" + conf.guid + "&count";
            getJSON(url, function(ctx) {
                return ctx.conf = conf, function(err, data) {
                    if (err) console.error(err); else {
                        var campaigns = data.campaigns;
                        ctx.adServingLoad = data.meta.adServingLoad;
                        for (var index = 0; index < len(campaigns); index++) {
                            var campaign = campaigns[index];
                            campaign.ctx = ctx, campaign.target = ctx.adspaces[campaign.adspace].target || ctx.adspaces[campaign.adspace].wallpaperTarget || document.body, 
                            campaign.type = (campaign.wallpaper ? "wallpaper:" : "") + (campaign.floating ? "floating:" : "") + campaign.banner_type, 
                            campaign.elem = $ID(campaign.target), campaign.elem ? ($ID(ctx.adspaces[campaign.adspace].target) && (campaign.elem.innerHTML = campaign.campaign && campaign.banner && campaign.adspace ? "<!-- Adspace: " + campaign.adspace + " Group:  " + campaign.group + " Campaign:  " + campaign.campaign + " Banner:  " + campaign.banner + " here -->" : "<!-- Adspace " + campaign.adspace + " (empty) here -->"), 
                            console.info("Adspace: " + campaign.adspace, campaign.elem), emit("adspace:loaded", campaign), 
                            campaign.campaign && campaign.banner && campaign.adspace ? (console.log("group:" + campaign.group), 
                            invisibleAdspaces.push(campaign)) : console.warn("Adspace was empty: " + campaign.adspace, campaign)) : console.error("target for adspace not found : " + campaign.target, campaign);
                        }
                    }
                    --anyWaiting, anyWaiting || ready(function() {
                        checkVisibility();
                    });
                };
            }(ctx));
        }
        return conf;
    }, console.debug("AdServ.released : " + AdServ.released), AdServ;
});